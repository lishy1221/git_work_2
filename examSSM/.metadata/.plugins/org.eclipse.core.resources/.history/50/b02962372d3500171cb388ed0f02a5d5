package java8Test;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import java.util.concurrent.TimeUnit;
import java.util.stream.Collectors;

public class StreamTest2 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		
		//创建一个大表
		int max = 1000000;
		List<String> values = new ArrayList<>(max);
		for (int i = 0; i < max; i++) {
		    UUID uuid = UUID.randomUUID();
		    values.add(uuid.toString());
		}
		
		//串行排序
		long t0 = System.nanoTime();
		long count = values.stream().sorted().count();//--并行：values.parallelStream().sorted().count();
		System.out.println(count);
		long t1 = System.nanoTime();
		long millis = TimeUnit.NANOSECONDS.toMillis(t1 - t0);
		System.out.println(String.format("串行耗时--sequential sort took: %d ms", millis));

	}
	   public void distinctPrimary() {
	        List<Integer> l = Arrays.asList(1,2,33,2,3,45,21,23,47,654,12);
	        List<Integer> r = l.stream()
	                .map(e -> new Integer(e))
	                .filter(e ->e%2!=0)
	                .distinct()
	                .collect(Collectors.toList());
	        System.out.println("distinctPrimary result is: " + r);
	    }
	

}
