package java8Test;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Random;
import java.util.UUID;
import java.util.concurrent.TimeUnit;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

import org.springframework.data.domain.Range;

public class StreamTest2 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		List<Integer> numbers=Arrays.asList(3,2,2,3,7,3,5);
		//获取对应的平方数
		List<Integer> squaresList=numbers.stream()
				.map(i->i*i)
				.distinct()//去重
				.collect(Collectors.toList());
		System.out.println("the square is:"+squaresList);
		
		//limit用于获取指定数量的流
		Random r=new Random();		
		r.ints().limit(5).forEach(System.out::println);		
		r.ints().limit(3).sorted().forEach(System.out::println);//对随机数进行排序
		
		//获取一个有序的有区间范围的流
		IntStream.range(0, 10).forEach(System.out::println);//[0,9)
		System.out.println(IntStream.range(0, 20).max());
		
		
		//创建一个大表
		/*int max = 1000000;
		List<String> values = new ArrayList<>(max);
		for (int i = 0; i < max; i++) {
		    UUID uuid = UUID.randomUUID();
		    values.add(uuid.toString());
		}
		
		//串行排序
		long t0 = System.nanoTime();
		long count = values.stream().sorted().count();//--并行：values.parallelStream().sorted().count();
		System.out.println(count);
		long t1 = System.nanoTime();
		long millis = TimeUnit.NANOSECONDS.toMillis(t1 - t0);
		System.out.println(String.format("串行耗时--sequential sort took: %d ms", millis));*/
		

	}	 	

}
